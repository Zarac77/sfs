@using System.Web.Mvc

@helper CreateActionLink(string linkText, string controllerName, object routeValues)
{
    var urlHelper = new UrlHelper(Context.Request.RequestContext);
    var action = urlHelper.Action("Create", controllerName, routeValues);
    var src = urlHelper.Content("~/Images/16x16/create.png");
    
    <a href="@action"><img src="@src" title="@linkText" alt="@linkText" /> @linkText</a>
}



@helper EditActionLink(string controllerName, object routeValues)
{
    var urlHelper = new UrlHelper(Context.Request.RequestContext);
    var action = urlHelper.Action("Edit", controllerName, routeValues);
    var src = urlHelper.Content("~/Images/16x16/edit.png");
    
    <a href="@action"><img src="@src" title="Editar" alt="Editar" /></a>
}



@helper DetailsActionLink(string controllerName, object routeValues)
{
    var urlHelper = new UrlHelper(Context.Request.RequestContext);
    var action = urlHelper.Action("Details", controllerName, routeValues);
    var src = urlHelper.Content("~/Images/16x16/details.png");
    
    <a href="@action"><img src="@src" title="Detalhes" alt="Detalhes" /></a>
}



@helper DeleteActionLink(string controllerName, object routeValues)
{
    var urlHelper = new UrlHelper(Context.Request.RequestContext);
    var action = urlHelper.Action("Delete", controllerName, routeValues);
    var src = urlHelper.Content("~/Images/16x16/delete.png");
    
    <a href="@action"><img src="@src" title="Excluir" alt="Excluir" /></a>
}



@helper IconActionLink(string linkText, string actionName, string controllerName, object routeValues, string imageName)
{
    var urlHelper = new UrlHelper(Context.Request.RequestContext);
    var action = urlHelper.Action(actionName, controllerName, routeValues);
    var src = urlHelper.Content("~/Images/16x16/" + imageName);
    
    <a href="@action"><img src="@src" title="@linkText" alt="@linkText" /></a>
}

@helper IconScriptLink(string linkText, string script, string imageName, object[] parameters)
{
    var urlHelper = new UrlHelper(Context.Request.RequestContext);
    var src = urlHelper.Content("~/Images/16x16/" + imageName);
    var s = String.Empty;
    /*foreach(var parameter in parameters) {
        if (s.Length > 0)
        {
            s += ",";
        }
        if(parameter.GetType() == typeof(string)) {
            s += "'" + parameter + "'";
        }
        else {
            s += "'" + parameter.ToString() + "'";
        }         
    }*/
    //s = "'" + parameters[0].ToString() + "'";
    s = parameters[0] != "" ? "'" + parameters[0].ToString() + "'" : "";
    
    <a href="#" onclick="@script (@s)"><img src="@src" title="@linkText" alt="@linkText" /></a>
}

@helper DummyButton(string text, string onClick) {
    <input type="button" class="small button" value="@text" onclick="@Html.Raw(onClick)" />
}

@helper DummyButton(string text, string onClick, string classInput) {
    <input type="button" class="@classInput" value="@text" onclick="@Html.Raw(onClick)" />
}

@helper Submit(string text)
{
    <input type="submit" class="small button" value="@text" />
}

@helper Submit(string text, string classInput)
{
    <input type="submit" class="@classInput" value="@text" />
}

@helper DateInput(string name, int width, string val)
{
    <input name="@name" class="date hasDatepicker" id="@name" type="text" data-val="true" data-val-date="The field Data de término must be a date." value="@val"/>
}

@helper TimeInput(string name, int width, string val)
{
    string w = width + "px";
    <input type="text" id="@name" name="@name" style="width:@w" class="text-box single line time" value="@val"/>
}

@helper ValidationSummary(ViewDataDictionary viewData, bool excludePropertyErrors)
{
    if (!viewData.ModelState.IsValid)
    {
        var modelStates = new List<System.Web.Mvc.ModelState>();

        for (var i = 0; i < viewData.ModelState.Keys.Count; i++)
        {
            var key = viewData.ModelState.Keys.ElementAt(i);

            if (key == String.Empty || !excludePropertyErrors)
            {
                modelStates.Add(viewData.ModelState.Values.ElementAt(i));
            }
        }

        if (modelStates.Count > 0)
        {
            <table class="validation-summary">
                <thead>
                    <tr>
                        <th>Problemas encontrados</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var modelState in modelStates)
                    {
                        foreach (var error in modelState.Errors)
                        {
                            <tr>
                                <td>@error.ErrorMessage</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
    }
}



@helper SmallImg(string imageName, string title)
{
    var urlHelper = new UrlHelper(Context.Request.RequestContext);
    var src = urlHelper.Content("~/Images/16x16/" + imageName);
    <img src="@src" title="@title" alt="@title" class="small-img" />
}

@helper FileInput()
{
    <input type="file" />
}

@helper SelecionarTodosScript()
{
    <script>
        function selecionarTodas(classInput) {
            var inputs = $("." + classInput);
            for (var i = 0; i < inputs.length; i++) {
                var inp = inputs[i];
                if (inp.type == 'checkbox' && inp.id != 'control') {

                    inputs[i].checked = $('#control').prop("checked");
                }
            }
        }
    </script>
}

@helper PaginacaoLista(string controllerName, string actionName, Sfs.ViewModels.ListaPaginada model)
{
    //Só funciona para ViewModels com inheritance de "Sfs.ViewModels.ListaPaginada".
    var urlHelper = new UrlHelper(Context.Request.RequestContext);
    <p style="text-align:center">
    @if (model.PaginaAtual > 0)
    {
        <a href="@urlHelper.Action(actionName, new { PaginaAtual = model.PaginaAtual - 1 })"><</a>
    }
    
    @for (int i = 0; i < model.TotalPaginas; i++)
    {
        string iAlterado = (i + 1).ToString() + " ";
        if (i != model.PaginaAtual)
        {
            <a href="@urlHelper.Action(actionName, new { PaginaAtual = i })">@iAlterado</a>
        }
        else
        {
            @iAlterado
        }
    }
    @if (model.PaginaAtual < model.TotalPaginas - 1)
    {
        <a href="@urlHelper.Action(actionName, new { PaginaAtual = model.PaginaAtual + 1 })">></a>
    }
</p>
}

@helper SelecionarTodosTrigger(string classInput)
{
    <br />
    <input type="checkbox" onclick="selecionarTodas('@classInput');" title="Selecionar Todos" id="control" />
}

@helper DropDown(IDictionary<Guid, string> valueDescricao, Guid keySelecionado, string name, int width) { 
    <select name="@name" id="@name" style="width:@(width)px">
        
        @foreach (var k in valueDescricao) {
            <option value="@k.Key" @(k.Key == keySelecionado ? "selected" : "")>@k.Value</option>
        }
    </select>
}